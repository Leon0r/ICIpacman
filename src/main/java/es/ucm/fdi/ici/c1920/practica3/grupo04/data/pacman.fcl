FUNCTION_BLOCK FuzzyMsPacMan	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	// GHOSTS ////////////////////////////////////////////////////////////////////////////////////////////
	BLINKYdistance : REAL;
	BLINKYconfidence : REAL;
	
	PINKYdistance : REAL;
	PINKYconfidence : REAL;
	
	INKYdistance : REAL;
	INKYconfidence : REAL;
	
	SUEdistance : REAL;
	SUEconfidence : REAL;
	
	EdibleTime : REAL;
END_VAR

VAR_OUTPUT				// Define output variables
	fleeFromBLINKY : REAL;
	eatBLINKY : REAL;
	
	fleeFromPINKY : REAL;
	eatPINKY : REAL;
	
	fleeFromINKY : REAL;
	eatINKY : REAL;
	
	fleeFromSUE : REAL;
	eatSUE : REAL;
END_VAR


// Fuzzify input variables
// GHOSTS //////////////////////////////////////////////////////////////////////////////////////////////
FUZZIFY BLINKYdistance
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY BLINKYconfidence			
	TERM low := (0, 1) (40, 0) ; 
	TERM medium := gauss 50 30;
	TERM high := (60, 0) (100, 1);
END_FUZZIFY

FUZZIFY PINKYdistance			
	TERM near := (0, 1) (60, 0); 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PINKYconfidence			
	TERM low := (0, 1) (40, 0) ; 
	TERM medium := gauss 50 30;
	TERM high := (60, 0) (100, 1);
END_FUZZIFY

FUZZIFY INKYdistance			
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY INKYconfidence			
	TERM low := (0, 1) (40, 0) ; 
	TERM medium := gauss 50 30;
	TERM high := (60, 0) (100, 1);
END_FUZZIFY

FUZZIFY SUEdistance			
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY SUEconfidence			
	TERM low := (0, 1) (40, 0) ; 
	TERM medium := gauss 50 30;
	TERM high := (60, 0) (100, 1);
END_FUZZIFY


FUZZIFY EdibleTime
	TERM soon := (5, 1) (10, 0) ; 
	TERM normal := gauss 15 5;
	TERM late := (15, 0) (100, 1) (200, 1);
END_FUZZIFY


// Defuzzify output variables
// GHOSTS ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DEFUZZIFY fleeFromBLINKY			
	TERM low := (0,1) (5,1) (15,0);
	TERM medium := gauss 15 5;
	TERM high := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method COG
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY eatBLINKY			
	TERM low := (0,1) (5,1) (15,0);
	TERM medium := gauss 15 5;
	TERM high := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method COG
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY fleeFromPINKY			
	TERM low := (0,1) (5,1) (15,0);
	TERM medium := gauss 15 5;
	TERM high := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method COG
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY eatPINKY			
	TERM low := (0,1) (5,1) (15,0);
	TERM medium := gauss 15 5;
	TERM high := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method COG
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY fleeFromINKY			
	TERM low := (0,1) (5,1) (15,0);
	TERM medium := gauss 15 5;
	TERM high := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method COG
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY eatINKY			
	TERM low := (0,1) (5,1) (15,0);
	TERM medium := gauss 15 5;
	TERM high := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method COG
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY fleeFromSUE			
	TERM low := (0,1) (5,1) (15,0);
	TERM medium := gauss 15 5;
	TERM high := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method COG
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY eatSUE			
	TERM low := (0,1) (5,1) (15,0);
	TERM medium := gauss 15 5;
	TERM high := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method COG
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

// RULES ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RULEBLOCK MsPacManRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	OR : MAX;
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)


	//Maybe no need to use distance of power pills? Maybe no need to differentiate between runaway and eatPowerPill?
	//TO DO: add edible states	
	/*
	if four ghosts
		if save path
			if power pill in save path -> eat power pill
			if power pill not in save path -> eat pills (in save path)
		if no save path
			if ghost closer than power pill -> eat pills
			if ghost farther than power pill -> eat power pill
			if ghost as close as power pill -> eat power pill
	if three ghosts
		if save path
			if power pill in save path -> eat power pill
			if power pill not in save path -> eat pills (in save path)
		if no save path
			if ghost closer than power pill -> eat pills
			if ghost farther than power pill -> eat power pill
			if ghost as close as power pill -> eat power pill
	if two ghosts
		if save path -> eat pills
		if no save path
			if ghost closer than power pill -> eat pills
			if ghost farther than power pill -> eat power pill
			if ghost as close as power pill -> eat power pill
	If one ghost-> eat pills
	If no ghosts -> eat pills
	*/
	
	 RULE 1 : IF BLINKYdistance IS near AND BLINKYconfidence IS high AND EdibleTime IS late
	 	THEN fleeFromBLINKY IS high;
	 RULE 2 : IF BLINKYdistance IS near AND BLINKYconfidence IS low AND EdibleTime IS late
	 	THEN fleeFromBLINKY IS medium;
	 RULE 3 : IF BLINKYdistance IS far AND BLINKYconfidence IS high AND EdibleTime IS late
	 	THEN fleeFromBLINKY IS low;
	 RULE 4 : IF BLINKYdistance IS far AND BLINKYconfidence IS low AND EdibleTime IS late
	 	THEN fleeFromBLINKY IS low;
	 	
	 RULE 5 : IF BLINKYdistance IS near AND BLINKYconfidence IS high AND EdibleTime IS soon
	 	THEN eatBLINKY IS high;
	 RULE 6 : IF BLINKYdistance IS near AND BLINKYconfidence IS low AND EdibleTime IS soon
	 	THEN eatBLINKY IS medium;
	 RULE 7 : IF BLINKYdistance IS far AND BLINKYconfidence IS high AND EdibleTime IS soon
	 	THEN eatBLINKY IS low;
	 RULE 8 : IF BLINKYdistance IS far AND BLINKYconfidence IS low AND EdibleTime IS soon
	 	THEN eatBLINKY IS low;
		
END_RULEBLOCK

END_FUNCTION_BLOCK
FUNCTION_BLOCK FuzzyMsPacMan	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	BLINKYdistance : REAL;
	PINKYdistance : REAL;
	INKYdistance : REAL;
	SUEdistance : REAL;
	PILL0distance : REAL;
	PILL1distance : REAL;
	PILL2distance : REAL;
	PILL3distance : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	runAway : REAL;
	goToPowerPill : REAL;
END_VAR

// GHOST DISTANCES
FUZZIFY BLINKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PINKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0); 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY INKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY SUEdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

// PILLS DISTANCES
FUZZIFY PILL0distance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PILL1distance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PILL2distance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PILL3distance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

// METODOS 
DEFUZZIFY runAway			// Defuzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY goToPowerPill			// Defuzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK MsPacManRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	OR : MAX;
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	//If all ghosts are following
	RULE 1 : IF (BLINKYdistance IS near) AND (PINKYdistance IS near) AND (INKYdistance IS near) AND (SUEdistance IS near) AND ((PILL0distance IS near) OR (PILL1distance IS near) OR (PILL2distance IS near) OR (PILL3distance IS near)) THEN (runAway IS emergency) AND (goToPowerPill IS emergency);
	//If three ghosts are following
	RULE 1 : IF (BLINKYdistance IS near) AND (PINKYdistance IS near) AND (INKYdistance IS near) AND ((PILL0distance IS near) OR (PILL1distance IS near) OR (PILL2distance IS near) OR (PILL3distance IS near)) THEN (runAway IS emergency) AND (goToPowerPill IS nervious);
	RULE 1 : IF (BLINKYdistance IS near) AND (PINKYdistance IS near) AND (SUEdistance IS near) AND ((PILL0distance IS near) OR (PILL1distance IS near) OR (PILL2distance IS near) OR (PILL3distance IS near)) THEN (runAway IS emergency) AND (goToPowerPill IS nervious);
	RULE 1 : IF (BLINKYdistance IS near) AND (INKYdistance IS near) AND (SUEdistance IS near) AND ((PILL0distance IS near) OR (PILL1distance IS near) OR (PILL2distance IS near) OR (PILL3distance IS near)) THEN (runAway IS emergency) AND (goToPowerPill IS nervious);
	RULE 1 : IF (PINKYdistance IS near) AND (INKYdistance IS near) AND (SUEdistance IS near) AND ((PILL0distance IS near) OR (PILL1distance IS near) OR (PILL2distance IS near) OR (PILL3distance IS near)) THEN (runAway IS emergency) AND (goToPowerPill IS nervious);
	//If two ghosts are following
	RULE 1 : IF (BLINKYdistance IS near) AND (PINKYdistance IS near) THEN (runAway IS nervious) AND (goToPowerPill IS calm);
	RULE 1 : IF (BLINKYdistance IS near) AND (INKYdistance IS near) THEN (runAway IS nervious) AND (goToPowerPill IS calm);
	RULE 1 : IF (BLINKYdistance IS near) AND (SUEdistance IS near) THEN (runAway IS nervious) AND (goToPowerPill IS calm);
	RULE 1 : IF (PINKYdistance IS near) AND (INKYdistance IS near) THEN (runAway IS nervious) AND (goToPowerPill IS calm);
	RULE 1 : IF (PINKYdistance IS near) AND (SUEdistance IS near) THEN (runAway IS nervious) AND (goToPowerPill IS calm);
	RULE 1 : IF (INKYdistance IS near) AND (SUEdistance IS near) THEN (runAway IS nervious) AND (goToPowerPill IS calm);
	//If one ghost is following
	RULE 1 : IF BLINKYdistance IS near THEN (runAway IS calm) AND (goToPowerPill IS calm);
	RULE 2 : IF PINKYdistance IS near THEN (runAway IS calm) AND (goToPowerPill IS calm);
	RULE 3 : IF INKYdistance IS near THEN (runAway IS calm) AND (goToPowerPill IS calm);
	RULE 4 : IF SUEdistance IS near THEN (runAway IS calm) AND (goToPowerPill IS calm);
	
	RULE 5 : IF BLINKYdistance IS medium THEN runAway IS nervious;
	RULE 6 : IF PINKYdistance IS medium THEN runAway IS nervious;
	RULE 7 : IF INKYdistance IS medium THEN runAway IS nervious;
	RULE 8 : IF SUEdistance IS medium THEN runAway IS nervious;
	RULE 9 : IF BLINKYdistance IS far THEN runAway IS calm;
	RULE 10 : IF PINKYdistance IS far THEN runAway IS calm;
	RULE 11 : IF INKYdistance IS far THEN runAway IS calm;
	RULE 12 : IF SUEdistance IS far THEN runAway IS calm;
END_RULEBLOCK

END_FUNCTION_BLOCK